The purpose of this coursework is to implement a binary search tree that can store information and be traversed in different methods. To complete this project, a binary tree data structure must be created that contains nodes with a value and references to the left and right child nodes. The tree must also have functions to insert new nodes, remove existing nodes, and perform different traversal methods. 

Binary trees are used in this project to create a hierarchical data structure that can be efficiently searched and traversed. The nodes in the binary tree contain a value that acts as a key, with left child nodes having keys less than the parent and right child nodes having keys greater than the parent. This organization allows for the tree to be quickly searched for a given key.

Three methods of traversal can be implemented on the binary tree. Pre-order traversal accesses the root node first, then the left subtree, and finally the right subtree. In-order traversal accesses the left subtree first, then the root node, and finally the right subtree. Post-order traversal accesses the left subtree first, then the right subtree, and finally the root node. Each method of traversal serves a different purpose and use case. Pre-order can be used to create a copy of the tree, in-order to get nodes in ascending order, and post-order is useful for expression evaluation.  

The bonus requirement for this project is to keep track of the height of each node in the tree to determine the overall height of the tree in O(1) time. The height of each node can be stored in a height variable in the node. As leaf nodes are inserted or removed and the height of subtrees changes, the heights of ancestor nodes must be updated to the maximum of the left and right subtree heights plus one. Storing the heights in each node enables O(1) access to the maximum height of the overall tree.