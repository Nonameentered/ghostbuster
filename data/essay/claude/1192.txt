A C++ compiler that compiles C code into three-address compatible code would require several important features and go through a multi-step testing process. 

Some key features of such a compiler would be:

1. A lexer and parser to analyze the input C code and break it into tokens, then parse it into an abstract syntax tree. The lexer would need to handle preprocessing directives, comments, identifiers, keywords, operators, literals, and punctuation. The parser would assemble the tokens into the syntax tree following the grammar of the C language.

2. A semantic analyzer to check that the parsed code follows the semantic rules of C, like type compatibility, visibility of identifiers, and correct use of operators. The semantic analyzer ensures the code is logically coherent before further compilation.

3. An intermediate code generator to translate the abstract syntax tree into three-address code with a one-to-one correspondence between operators and addresses. The three-address code should have a format compatible with the C abstract machine defined in the C standard. 

4. An optimization pass to improve the intermediate three-address code by removing unused variables and expressions, constant folding, and dead code elimination. Optimizations make the final executable faster and smaller.

5. A code generator to translate the optimized three-address code into target assembly language for a specific machine architecture. The assembly code can then be assembled into an executable program.

To test the compiler, a robust testing process would be needed:

1. Unit testing of the individual lexer, parser, semantic analyzer, intermediate code generator, optimizer, and code generator components with known inputs and expected outputs.

2. Integration testing to ensure the separate components work together properly by compiling small C programs and checking the outputs.

3. Validation testing using a large suite of sample C programs to check that the compiler handles all features of C correctly and produces the expected outputs. 

4. Performance and stress testing to ensure the compiler meets needs for speed, memory usage, and scalability. 

5. Regression testing with each new release of the compiler to quickly catch any new errors introduced during development.

In summary, a C++ compiler that can compile C code needs essential features like lexical analysis, parsing, semantic checking, intermediate code generation, optimization, and code generation. Rigorous multi-level testing of the compiler is required to verify it properly handles the C language and meets performance needs. The flow through the compiler follows the path from source code to final executable, translating the code through multiple representations along the way.