The program will have two main functions related to infix and postfix expressions. The first function will convert an infix expression to postfix. The infix expression is the typical mathematical notation with operators between operands, such as 3+4. The program will read the infix expression from an edit box or input field. It will then use a stack data structure to scan the infix expression. 

Operands will be pushed onto the stack as they are encountered. When an operator is read, the program will pop the top two values from the stack. It will then evaluate if the operator has higher precedence than the top of the stack. If so, it pushes the operator onto the stack. If not, it will perform the operation on the two popped values and push the result back onto the stack. This continues until the entire infix expression is read. The final postfix expression is produced by popping all remaining values from the stack.

The second function will evaluate a postfix expression. The program will read the postfix expression from the edit box. It will scan the expression and push operands onto the stack. When an operator is encountered, the top two operands will be popped, the operation performed, and the result pushed back onto the stack. Once the entire expression has been scanned, the final result will be the only value left on the stack.

The program meets the requirements of converting between infix to postfix expressions and evaluating postfix expressions. By using a stack, it is able to efficiently manipulate the expressions into the proper notation and calculate the final mathematical result. The stack data structure is integral to the success of the program.