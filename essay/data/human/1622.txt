This system is a program which supervises an auction environment. It contains 3 servers and several (indeterminate number) sellers and bidders. This distributed system uses the Beowulf cluster.
A file which is called "structure.h" defines the data structure. These structures are used to store a seller, a bidder and an auction.
Here is the structure which defines an auction,
Here is the structure which defines a seller,
Here is the structure which defines a bidder,
A list of each of these structures is defined in the server file. These lists have to be always the same on the three servers! Indeed, for example, if a server treated a new seller, it has to inform the two other servers that a new seller is created. Furthermore, a mutual exclusion on each of these lists has to be managed. So, a LockManager is created and manages it. This is explain below, in another part.
This program doesn't manage the case where a server dies. Indeed, if a server dies, the system still works (with only 2 servers) but the dead server doesn't become alive again. If the root server dies, the child process (clock synchronisation and accept connection from outside) would still work, so the root server dead is not a problem. However, if one of the two other server (the second one, on Beowulf6) dies, the system can't work again because this server has to manage the auction's duration (see above).
So, I think the system depends to much on the reliability of the server. If one dies, some problem can occur and if the one on Beowulf6 dies, the system dies as well. So, that's a problem in this program.
A real world system like ebay.com can stay alive if one of the servers dies. Furthermore, in general, more than 3 servers are available in a real system.