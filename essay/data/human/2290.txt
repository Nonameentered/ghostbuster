There are a number of reasons for organisations, of all sizes, but particularly larger ones, to find cause to replace Information Systems that are the result of years of development, upgrade, modification and change. Such protracted mutations of IT systems often leads them to become fragmented, difficult to use, and holding duplicate data locked-in by proprietary standards and formats based on legacy methods, and making interoperability and integration with an organisations' other systems difficult or impossible. The retirement and replacement of an order processing (transaction) system (that is often heavily used, and relied upon) by an organisation must be conducted in such a manner as to ensure specific, measurable goals. Three such objectives could be as follows:
Accurately define the business practices and functions that are to be supported through the use of IT, in order to describe them as part of an architecture. These business practices should be specific, discreet and described accurately, and be translated into 'building blocks'. Each building block will represent a business process in terms of the service provided to it, and how it is enhanced by Information Technology.
The production of an Architectural model and framework that describes the interaction between these 'building blocks'. The framework will define how each block interacts with each other and the relationships between them. The building blocks should be inter-related and not one-to-one, that is, dependent on a particular other service or function. Reducing the complexity of these interactions is key to building a system that is more flexible and scalable, supporting growth and change. This allows a baseline to be formed, on top of which other functions can be supported - in this example, an Order Processing system.
The implementation of the architecture throughout the organisation. A thorough examination of available resources, skills, hardware, software and user limitations to produce a architecture that defines the standards and framework into which future developments fit, and a new order processing system is developed as an interchangeable block, sharing information through open interfaces and common standards with all other components of the framework.
Measuring the success of the implementation of an Enterprise IT Architecture framework can be conducted in a number of ways. By explicitly linking each process of the architecture development (such as Architecture Vision and Opportunities & Solutions) to a business goal or strategy, the value that is added to that organisation can be determined in metrics, in the case of an order processing system, such as time taken to process a transaction, update a record, or the ease (in terms of time taken or code needed to written, and ramifications for other systems in the framework) of making a change to the underlying record structure (such as adding a field or changing a data type or length).
The decision by a consumer retailer, such as in this example, to adopt a Point-of-Sale (POS) system that has a published architecture document, is a wise one. The Data Model that is used by the company is implemented through its Enterprise IT Architecture that it is developing allows for such retail applications to be integrated into its framework, making such a POS system a sensible option for elegantly integrating into their architecture.
The Enterprise Architecture Continuum describes a set of different architectures, and the bi-directional relationship between each one. In terms of objectives, the TOGAF Architecture Development Method (ADM) aims to provide the following:
The resources given in the case study consist of (i) Fujitsu's Point-of-Sale architecture documentation and (ii) the Data Model for Retail Applications from the Association for Retail Technology Standards. These information sets can be integrated into the Enterprise Architecture ADM process in the following ways:
The Retail Technology Standards' Data Model can provide information about the functioning and flow of information within a retail system. This fits in to stage C of the TOGAF ADM, which describes, format-independently, the sources and types of data that support the retailer's operations, as part of the Data Architecture document. Furthermore, the Application Architecture document can include information from the Data Model on the system design and targets for retrieving, processing and storing this data. This is a part of the Common Systems Architectures building block of the Architecture Continuum, concerning information systems in a generic problem domain, such as the domain of technology in the retail industry.
The Point of Sale architecture documents provide by Fujitsu primarily govern the operation of their specific system. However these documents can be used to specify and define the interfaces of this system within the framework and its interaction with other components of the IT architecture. As such, its information can be included as a part of stage D, the Technology Architecture, which is concerned with technological environment in terms of specific applications and systems, and their interaction to form an architectural baseline and common interface. This forms a part of the architecture developed in accordance with the Industry Architectures component of the Architecture Continuum - dealing with the integration of specific systems and components.
The issue of keeping sensitive information hidden in an Enterprise IT Architecture provides a challenge, particularly with a system such as TOGAF which tends to define open, accessible interfaces between components and free flow of data in an architecture. However, a number of Architecture Principles provided by an Architecture Framework, such as TOGAF, are applicable and useful for the radar equipment supplier, and will allow the processes and information shared with the MOD to be kept secret from foreign suppliers, such as the electronic equipment corporation in America.
Three types of Principles are defined by TOGAF 8.1 that provide guidance on decision making and practice in distinct areas - Enterprise, Information Technology, and Architectural. It is the Architecture principles that of concern here, and three are to be selected in this case study relating to the security of data between partner organisations in the architecture. TOGAF specifies the design of architecture principles according to five criteria: Ease of Understanding, Robustness, Completeness, Consistency and Stability. Each principle is to be recorded with a descriptive statement of its intent, an explanatory rationale, and any implications. The Architecture Principals are concerned with the implementation and use of IT assets within an organisation, and set out a framework and criteria for decision making.
One suggested principal each of Business, Data and Technical is provided.
The TOGAF ADM (Architecture Development Method) sets out a process for developing Enterprise IT Architecture through a number of inter-related phases. One such phase is that of the development of Business Architectures; phase B in the TOGAF ADM. In the case of the computer manufacturer selling directly to the consumer (B2C) rather than its' business relationship with retailers (B2B), this phase is important as it provides the analysis of the business plan, strategy, drivers, and objectives. Switching to selling directly to the consumer is a key change in the plan and strategy of the business and is reflected in its Business Architecture. An important reason for this stage is that it is able to generate a 'view' of the business that is relevant to each stakeholder, and shows to them, in less generic and less technical terms, the value created by each business activity and the return-on-investment (ROI) for each of them - particularly relevant in this example, as it will be important to show the value created for each stakeholder in changing the activity of the business to sell directly to the consumer.
In the development of the Business Architecture documentation, a baseline architecture (which describes the 'state-of-play' of the business in terms of its existing architecture, processes, and practices) must be drawn-up using details from the last cycle of development in this phase of the ADM, or if this is the first time an Business Architecture process has been carried out, using information gathered about the business from other sources. This must be compared with a target business architecture, describing the 'where we want to be', which will lay out the new business strategies, in this case the switch in the sell domain of the business, and define a description of the processes, both functional and organisational, of the Business Architecture needed to support the new operation and direction of the enterprise.
Identification of the differences (gaps) between the baseline and target architectures allow a Statement of Architecture Work to be produce defining what needs to be done to get the business from its current state to the target state. The biggest likely differences between the baseline and target in this scenario are:
Viewpoints and stakeholder concerts (part of the second phase). When selling directly to the customer, viewpoints of retailers are no longer an issue as they are no longer a stakeholder in the business as they have been removed (disintermediated) from the supply chain. However, customers are now extremely important stakeholders that must be kept happy - and understanding their concerns and providing a viewpoint for them is now mission-critical.
Information Requirements (part of the third phase, Architectural Model Creation) - selling directly to the consumer rather than through a retailer will mean needing to know more about who your target customer (market) is, and detailed descriptions of that market;
Review of non-functional criteria (sixth phase). Selling directly to the customer introduces a whole host of new functions that are not directly related to the practice of selling - such as providing pre and after-sales support, marketing, pricing strategies, supply and demand.
The challenge of integrating legacy systems, such as in the case of the check-in and boarding system at an airport, is one that must be properly examined and its implications understood before embarking upon any major IS project, particularly the development of an Enterprise IT Architecture. Uncovering repositories or 'silos' of information locked-in to legacy systems half way through a project can cause huge disruption and may result in earlier phases of an architecture development needing to be re-examined. In this particular example, during the fourth stage of the TOGAF ADM, the Technology Architecture Development, firstly a Technology Baseline is documented, which describes the nature and structure of existing technology components, and secondly a Target Technology Architecture is designed, which specifies a vision and detailed plan of the structure and interaction of the technology underpinning the business operations that the organisation wish to move to. Discovery of an unchangeable legacy system containing critical data should have occurred at a much earlier stage, to allow a smoother development of a target architecture that is implemented around the existing systems and allows them become a part of the new architecture. Phase C, Information Systems Architectures, comprises of two key 'domains' of information gathering and analysis - Data Architecture and Applications Architecture. A key aspect of the analysis of the organisations' data architecture is identifying and understanding data types, locations and sources. A thorough analysis would have revealed the implications of the important data (needed by other components of the IT Architecture) being locked-in to this legacy boarding and check-in system. Discovery and full realisation at such a late stage as Technology Architecture (D) means that documents such as the Data Baseline Description and Data Management Process Models will almost certainly require revision or need to be re-written. The other domain, Applications Architecture, deals with specification of the types of application systems needed to support the businesses' functions - the check-in and boarding process is a crucial business function of an airline, and the IT system to support it is very important. Identifying that the legacy system, and the data contained within it, cannot be migrated or replaced, at a later stage almost certainly means that this document will need to be revisited.
The above are just two examples of processes in earlier phases of the Architecture Development Method that may need to be re-done following the late revelation of an unchangeable legacy system. Minimising the risk of having to revise or earlier stages in a plan can be achieved through a thorough and logical analysis of existing data structures, applications and legacy systems, and by setting appropriate goals and defining interfaces, interactions and data types locked-in by these systems at an early stage.
Phase G of the TOGAF Architecture Development Model (ADM) is concerned with Implementation Governance - and provides for management of the implementation of an IT architecture through an Impact Analysis, Architecture Contract, and the system itself (as a complainant component of the overall IT framework or infrastructure). The role of the IT architect in this scenario, and specifically relating to the Implementation phase of the ADM cycle, is to identify re-usable parts ('building blocks') in designing and implementing a solution, represent the organisational view of the architecture (ensuring that constructed systems and component support and underpin business functions in a useful way that generates value for the organisation), and ensure the overall integrity of the developed architecture. Development of two systems working in parallel with each other using the TOGAF ADM presents a unique challenge, particularly when the development is simultaneous, as in the present example. By building the target architectures first, and ensuring that they properly conform to the goals and plans set by the organisation and its architect, development of two parallel systems is made easier by having a common baseline with which to develop from. This baseline requires proper and exhaustive specification of data types, structures, input and outputs of every component in the architecture in order for systems developed within in (as in this example) to be able to conform to common formats, protocols, and standards to exchange data. Implementing two systems that need to exchange data means that will need to make use of these specified, interchangeable data formats. The Architecture Board, a cross-organisational panel for review and control, founded as a part of the Implementation phase, enforces compliance with the architecture, and oversee teams developing in parallel to ensure compatibility is maintained. A high level of conformance with the architecture principles by both systems maximises the chances of the success of the interoperability and data exchange when the systems go on-line.
Describing a Business Scenario document is a useful method in the development of an IT Architecture as it allows real business process requirements to be met and technology applied appropriately to solve a problem and underpin a valued function. In the case of this roadside breakdown service, benefit can be gained from a number of concerned persons (stakeholders) being present in a workshop that aims to describe, document, and extract valuable information from this business scenario to provide a useful output in the form of a statement of architecture work, business baseline, and target business architecture documents. In this case study, the following roles should be included in such a workshop to provide their own viewpoints and concerns and aid in providing an accurate description of the business scenario:
Overleaf is a sample Business Scenario workshop invitation letter to the above.
Enterprise IT Architecture, and its development, is often regarded as being nothing more than a structured, specified method of applying common sense to the introduction of information systems into an organisation to support its functions and activities. After examining a number of architecture frameworks, specifically, the Open Group Architecture Framework (TOGAF), the US Federal Enterprise Architecture Framework (FEAF), and the Zachman commercial framework, this Author is of the opinion that this statement is largely true. This, however, is not to de-value architecture principles. Common sense is frequently the first thing to go 'out of the window' in development of complicated systems, particularly IT architectures, with many participants succumbing to an only-too-human tendency to look right past common assumptions and truths that are right under their noses.
The US Government uses the Federal Enterprise Architecture Framework to develop, manage and modify its systems using a business-driven approach, by viewing its services and functions as business products and activities. This comes from its common ancestry shared with TOGAF. Its characteristics are very similar to those of other Architecture Development Models and Frameworks - it focuses on providing a structured way of describing baselines, technical reference models, and data models that are tailored towards the work of government departments and the communications and commonalities between them, and is linked to capital planning and government strategy. This is a prime example of the application of common sense - differing government departments may implement systems that meet their needs without considering how their systems may interact with the systems of other departments - all FEAF does it to structure this logic and reasoning and present it in a highly systematic, methodised format.
Similarly, the commercially-available Zachman framework for classifying and defining artefacts (the 'building blocks' of TOGAF) organises data and applications into matrices that allow business scenarios and opportunities for introducing technology to aid them to be extracted and specified. Zachman is primarily concerned with eliciting and encapsulating these elements or artefacts but does not provide a specified ADM like TOGAF or FEAF. Again though, the framework provided by Zachman merely provides a way of thinking and a structured process for determining and grouping activities, information flow, assumptions and constraints that are widely known throughout the business, but not easily brought together without applying a great deal of common sense to link sometimes seemingly unrelated activities.