Introduction
Introductory Programming Practical 8 required the development of a program that implements the Euclidean Algorithm to find the greatest common divisor (GCD) of two positive integers. The program should also be able to handle user input errors. In this essay, I will discuss how I went about designing and developing the program to meet the specified criteria. I will also describe the implementation of the Euclidean Algorithm and how the program handles user input errors. Finally, I will evaluate the success of the program in meeting the criteria specified in the task section.
Design and Development
The first step in designing the program was to identify the user's requirements. To find the GCD of two numbers, the program should accept two positive integers as input from the user. The program should then check if the input is valid, that is, if it is a positive integer. If the input is not valid, the program should display an error message and ask the user to input the values again. Once the input is validated, the program should apply the Euclidean Algorithm to find the GCD of the two numbers.
The Euclidean Algorithm involves dividing the larger number by the smaller number and taking the remainder. The smaller number then becomes the divisor, and the remainder becomes the dividend. This process is repeated until the remainder is zero, at which point the divisor is the GCD of the two numbers.
To implement the Euclidean Algorithm, I used a while loop that continues until the remainder becomes zero. Within the while loop, the program first checks which of the two input numbers is larger. The larger number becomes the dividend, while the smaller number becomes the divisor. The program then calculates the remainder by dividing the dividend by the divisor using the modulo operator. If the remainder is zero, the divisor is the GCD, and the program exits the loop. If the remainder is not zero, the divisor becomes the dividend, and the remainder becomes the new divisor. The loop continues until the remainder becomes zero.
User Input Errors
To handle user input errors, the program uses a try-except block to catch any exceptions that may occur. When the user inputs a value, the program attempts to convert the input to an integer using the int() function. If the input is not a valid integer, a ValueError exception is raised. The program catches this exception and displays an error message asking the user to input a valid integer. The user is then asked to input the value again.
In addition to validating the input, the program also checks if the two input values are positive integers. If either of the input values is not positive, the program displays an error message and asks the user to input positive integers.
Program Evaluation
The program developed meets the criteria specified in the task section. The program accepts two positive integers as input from the user and uses the Euclidean Algorithm to find the GCD of the two numbers. The program also handles user input errors by validating the input and displaying error messages when necessary.
The program is easy to use and user-friendly. The error messages provide clear instructions on how to correct input errors, making it easy for the user to input the correct values. The implementation of the Euclidean Algorithm is efficient and accurately finds the GCD of the two input values.
Conclusion
In conclusion, the program developed for Introductory Programming Practical 8 meets the criteria specified in the task section. The program accepts two positive integers as input from the user, uses the Euclidean Algorithm to find the GCD of the numbers, and handles user input errors. The implementation of the Euclidean Algorithm is efficient and the error messages are clear and easy to understand. Overall, the program is user-friendly and easy to use.