The field of computer science has risen to new heights in recent times with various innovations taking center stage. One such innovation is the development of a "school scientific" application that computes matrices multiplication and solves linear equations using both sequential and parallel algorithms. Programming this application requires the use of several technologies and concepts, including C programming language, MPI (Message Passing Interface), Parallel Computing, and Algorithmic design.
C programming language is a language that has stood the test of time, widely used for system programming, embedded systems, and game development due to its simplicity, flexibility, and efficiency. The C language's hallmark is its ability to manipulate data structures, such as arrays, which are crucial for mathematical computations. In the development of the "school scientific" application, C programming language was used to implement the algorithms that implement matrix multiplication and solving linear equations using sequential computing. The algorithms for sequential computation were implemented in a single core of a computer, which computes processes' data sequentially and may be characterized by inherent bottlenecks that lead to slow performance. 
Parallel Computing refers to the splitting of computing tasks into smaller tasks that may be executed concurrently in different cores or processors. Parallel Computing maximizes resource utilization and reduces the time complexity of problems. In the development of this application, the parallel algorithm was implemented using the MPI programming paradigm. MPI programming is a high-performance computing paradigm designed for distributed-memory systems, taking advantage of the parallel nature of the computing clusters. MPI is designed to minimize the overhead of inter-process communication and maximize scalability. Each MPI process computes its portion of the matrix by solving a section of the linear equation independently and synchronizing the final results through inter-process communication.
Algorithmic design involves developing algorithms solving mathematical problems. The primary focus of algorithmic design is to develop efficient, effective algorithms that solve mathematical problems in a reasonable time frame. The two algorithms used in the "school scientific" application are for matrix multiplication, and solving linear equations. The matrix multiplication algorithm involves the computation of matrix product while the algorithm for solving linear equations involves using matrix operations to solve systems of linear equations. The sequential algorithms were relatively slower than the parallel algorithms due to the fact that it took longer time to complete the computations for large matrices and large linear equation systems.
To translate the algorithms into C code, one has to use a variety of structures and functions, depending on the complexity of the algorithm. Fundamental structures such as loops, if-else statements, and functions were used to implement the matrix multiplication algorithm. The implementation of matrix multiplication is crucial in solving linear equations as the solution requires multiplying the coefficient matrix by the inverse matrix. In implementing the parallel algorithm, the message-passing paradigm was used, as MPI provides a simple and efficient means of communication between the different processes used in parallel computing.
Benchmarking analysis was used to compare the performance of the sequential algorithm and parallel algorithms. The time taken to compute matrices using sequential algorithms and parallel algorithm was recorded, and the two results were compared to determine the speedup obtained during parallel execution. The linear equation system's performance was compared using the same benchmarking analysis. 
The results were significantly different between sequential and parallel algorithms. The parallel algorithm was faster than the sequential algorithm, with around 100% speedup achieved for large matrices. However, it should be noted that the parallel implementation of code requires additional hardware resources. The result obtained from benchmarking analysis showed significant improvement in the runtime of the application. It can reduce the time taken for scientific computing drastically.
In conclusion, developing a "school scientific" application that computes matrices multiplication and solves linear equations requires the utilization of several technologies such as C programming language, MPI programming, parallel computing, and algorithmic design. The implementation of these technologies enabled the development of an efficient application that could be used for scientific computing. The benchmarking results obtained highlighted the significance of parallel computing and its effect on reducing time complexity and computing time. The application can be used for scientific computing and can serve as a starting point for students who want to delve into scientific computing.