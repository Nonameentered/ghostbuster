The problem being solved in this coursework is navigating a maze. A LIFO (Last In, First Out) stack is being used to keep track of the path through the maze and which dead ends have been reached so far as we backtrack and continue exploring. Since stacks  operate based on last in, first out order, we can push new paths onto the stack as we explore down them and then pop off paths when we reach dead ends to continue exploring other options. 

The maze should be modeled as a 2D array, where each element contains either 1 to denote a wall, 0 to denote a clear path, or -1 to denote a path we have already explored. Using a 2D array model, moving through the maze can be done systematically by exploring each open adjacent cell, checking for visited cells and walls. With this model, the stack becomes critical for keeping track of which adjacent cells have already been added to the path so we do not repeat them, but can instead backtrack as needed. 

For example, if we push paths A, B, and C onto the stack in order of exploration, reach a dead end at C, and pop off C, we know to next explore from B since A was already added to the path before B. Without the stack, we would have to somehow keep track of the sequence in which we explored paths to know how to properly backtrack, making the stack essential for solving this maze navigation problem in an organized fashion. Overall, the LIFO stack allows for methodical maze solving by trying each new path, backing up when dead ends are reached, and continuing the search without repetitively re-trying paths we have already explored. The 2D array neatly models the maze in a format that can be systematically explored using the stack.